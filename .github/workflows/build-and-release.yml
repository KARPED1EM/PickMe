name: Build & Release

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    types: [opened, ready_for_review]
    paths-ignore:
      - '**/*.md'
      - 'LICENSE'
      - '.gitignore'

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Windows (${{ matrix.name }})
    if: >
      ${{
        github.event_name != 'pull_request' ||
        (github.event.action == 'opened' && !endsWith(github.actor, '[bot]')) ||
        (github.event.action == 'ready_for_review')
      }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: x86,   runner: windows-latest,  py_arch: x86,   triplet: win-py313-x86 }
          - { name: x64,   runner: windows-latest,  py_arch: x64,   triplet: win-py313-x64 }
          - { name: arm64, runner: windows-11-arm,  py_arch: arm64, triplet: win-py313-arm64 }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && format('refs/pull/{0}/merge', github.event.pull_request.number) || '' }}

      - name: Setup Python 3.13 (${{ matrix.py_arch }})
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: ${{ matrix.py_arch }}
          cache: 'pip'

      - name: Install deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller

      - name: Build (PyInstaller onefile GUI)
        shell: pwsh
        run: |
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          pyinstaller scripts/desktop.pyw --clean --onefile --noconsole `
            --name PickMe `
            --icon "icon.ico" `
            --add-data "app/templates;app/templates" `
            --add-data "app/static;app/static" `
            --add-data "app/data;app/data"

      - name: Upload artifact exe (PickMe-${{ matrix.triplet }})
        uses: actions/upload-artifact@v4
        with:
          name: PickMe-${{ matrix.triplet }}
          path: dist/PickMe.exe
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions: { contents: write }
    steps:
      - name: Download release artifacts only
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: PickMe-win-py313-*
          merge-multiple: false

      - name: Zip each exe for release
        run: |
          set -e
          cd artifacts
          find . -type f -name 'PickMe.exe' | while read -r exe; do
            dir="$(basename "$(dirname "$exe")")"
            zipname="../${dir}.zip"
            zip -j "$zipname" "$exe"
          done
          cd ..

      - name: Create Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            PickMe-win-py313-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
